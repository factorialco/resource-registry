# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rspec-json_expectations` gem.
# Please instead update this file by running `bin/tapioca gem rspec-json_expectations`.


# source://rspec-json_expectations//lib/rspec/json_expectations/matcher_factory.rb#1
module RSpec
  class << self
    # source://rspec-core/3.13.0/lib/rspec/core.rb#70
    def clear_examples; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#85
    def configuration; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#49
    def configuration=(_arg0); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#97
    def configure; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#194
    def const_missing(name); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def context(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#122
    def current_example; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#128
    def current_example=(example); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#154
    def current_scope; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#134
    def current_scope=(scope); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def describe(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def example_group(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def fcontext(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def fdescribe(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#58
    def reset; end

    # source://rspec-core/3.13.0/lib/rspec/core/shared_example_group.rb#110
    def shared_context(name, *args, &block); end

    # source://rspec-core/3.13.0/lib/rspec/core/shared_example_group.rb#110
    def shared_examples(name, *args, &block); end

    # source://rspec-core/3.13.0/lib/rspec/core/shared_example_group.rb#110
    def shared_examples_for(name, *args, &block); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#160
    def world; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#49
    def world=(_arg0); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def xcontext(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def xdescribe(*args, &example_group_block); end
  end
end

# source://rspec-json_expectations//lib/rspec/json_expectations/matcher_factory.rb#2
module RSpec::JsonExpectations; end

# Allows to present failures in a nice way for each json path
#
# source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#4
class RSpec::JsonExpectations::FailurePresenter
  class << self
    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#6
    def render(errors); end

    private

    # @return [Boolean]
    #
    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#85
    def error_is_missing?(error); end

    # @return [Boolean]
    #
    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#77
    def error_is_not_eq?(error); end

    # @return [Boolean]
    #
    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#81
    def error_is_not_match?(error); end

    # @return [Boolean]
    #
    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#73
    def error_is_size_mismatch?(error); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#13
    def render_error(path, error, negate = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#58
    def render_missing(path, error, negate = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#34
    def render_no_key(path, error, negate = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#40
    def render_not_eq(path, error, negate = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#49
    def render_not_match(path, error, negate = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/failure_presenter.rb#23
    def render_size_mismatch(path, error, negate = T.unsafe(nil)); end
  end
end

# This class allows to traverse a json actual value along
# with json expected value for inclusion and check if they
# match. Errors are accumulated in errors hash for each
# json atom paths.
#
# source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#10
class RSpec::JsonExpectations::JsonTraverser
  class << self
    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#17
    def traverse(errors, expected, actual, negate = T.unsafe(nil), prefix = T.unsafe(nil), options = T.unsafe(nil)); end

    private

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#158
    def conditionally_negate(value, negate = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#148
    def fetch(actual, key, default = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#49
    def handle_array(errors, expected, actual, negate = T.unsafe(nil), prefix = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#43
    def handle_hash(errors, expected, actual, negate = T.unsafe(nil), prefix = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#31
    def handle_keyvalue(errors, expected, actual, negate = T.unsafe(nil), prefix = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#101
    def handle_regex(errors, expected, actual, negate = T.unsafe(nil), prefix = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#115
    def handle_rspec_matcher(errors, expected, actual, negate = T.unsafe(nil), prefix = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#56
    def handle_unordered(errors, expected, actual, negate = T.unsafe(nil), prefix = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#131
    def handle_unsupported(expected); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#83
    def handle_value(errors, expected, actual, negate = T.unsafe(nil), prefix = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#97
    def handled_by_simple_value?(expected); end

    # @return [Boolean]
    #
    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#138
    def has_key?(actual, key); end

    # source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#69
    def match_size_of_collection(errors, expected, actual, prefix, options); end
  end
end

# source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#11
RSpec::JsonExpectations::JsonTraverser::HANDLED_BY_SIMPLE_VALUE_HANDLER = T.let(T.unsafe(nil), Array)

# source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#12
RSpec::JsonExpectations::JsonTraverser::RSPECMATCHERS = T.let(T.unsafe(nil), Array)

# source://rspec-json_expectations//lib/rspec/json_expectations/json_traverser.rb#13
RSpec::JsonExpectations::JsonTraverser::SUPPORTED_VALUES = T.let(T.unsafe(nil), Array)

# source://rspec-json_expectations//lib/rspec/json_expectations/matcher_factory.rb#3
class RSpec::JsonExpectations::MatcherFactory
  # @return [MatcherFactory] a new instance of MatcherFactory
  #
  # source://rspec-json_expectations//lib/rspec/json_expectations/matcher_factory.rb#4
  def initialize(matcher_name); end

  # source://rspec-json_expectations//lib/rspec/json_expectations/matcher_factory.rb#8
  def define_matcher(&block); end
end

# source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#72
module RSpec::JsonExpectations::Matchers
  # source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#115
  def UnorderedArray(*array); end
end

# source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#73
class RSpec::JsonExpectations::Matchers::UnorderedArrayMatcher
  extend ::Forwardable

  # @return [UnorderedArrayMatcher] a new instance of UnorderedArrayMatcher
  #
  # source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#80
  def initialize(array); end

  # @return [Boolean]
  #
  # source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#106
  def all?(&blk); end

  # Returns the value of attribute array.
  #
  # source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#76
  def array; end

  # source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#101
  def check_for_missing(missing, item, index, ok); end

  # source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#84
  def match(errors, actual, prefix); end

  # source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#93
  def match_one(missing, item, index, actual); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # source://rspec-json_expectations//lib/rspec/json_expectations/matchers.rb#110
  def unwrap_array; end
end

# source://rspec-json_expectations//lib/rspec/json_expectations/version.rb#3
RSpec::JsonExpectations::VERSION = T.let(T.unsafe(nil), String)
