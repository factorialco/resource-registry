# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activesupport/all/activesupport.rbi
#
# activesupport-7.2.0

module ActiveSupport
  def self.cache_format_version; end
  def self.cache_format_version=(value); end
  def self.deprecator; end
  def self.eager_load!; end
  def self.error_reporter; end
  def self.error_reporter=(arg0); end
  def self.gem_version; end
  def self.test_order; end
  def self.test_order=(val); end
  def self.test_parallelization_threshold; end
  def self.test_parallelization_threshold=(val); end
  def self.to_time_preserves_timezone; end
  def self.to_time_preserves_timezone=(value); end
  def self.utc_to_local_returns_utc_offset_times; end
  def self.utc_to_local_returns_utc_offset_times=(value); end
  def self.version; end
  def test_order; end
  def test_order=(val); end
  def test_parallelization_threshold; end
  def test_parallelization_threshold=(val); end
  extend ActiveSupport::Autoload
  extend ActiveSupport::LazyLoadHooks
end
module ActiveSupport::DeepMergeable
  def deep_merge!(other, &block); end
  def deep_merge(other, &block); end
  def deep_merge?(other); end
end
class Hash
  def _deep_transform_keys_in_object!(object, &block); end
  def _deep_transform_keys_in_object(object, &block); end
  def assert_valid_keys(*valid_keys); end
  def blank?; end
  def compact_blank!; end
  def compact_blank; end
  def deep_merge?(other); end
  def deep_stringify_keys!; end
  def deep_stringify_keys; end
  def deep_symbolize_keys!; end
  def deep_symbolize_keys; end
  def deep_transform_keys!(&block); end
  def deep_transform_keys(&block); end
  def except!(*keys); end
  def extract!(*keys); end
  def extractable_options?; end
  def present?; end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def reverse_update(other_hash); end
  def slice!(*keys); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys!; end
  def symbolize_keys; end
  def to_options!; end
  def to_options; end
  def to_param(namespace = nil); end
  def to_query(namespace = nil); end
  def with_defaults!(other_hash); end
  def with_defaults(other_hash); end
  include ActiveSupport::DeepMergeable
end
module ActiveSupport::LazyLoadHooks
  def execute_hook(name, base, options, block); end
  def on_load(name, options = nil, &block); end
  def run_load_hooks(name, base = nil); end
  def self.extended(base); end
  def with_execution_control(name, block, once); end
end
module ActiveSupport::Inflector
  def apply_inflections(word, rules, locale = nil); end
  def camelize(term, uppercase_first_letter = nil); end
  def classify(table_name); end
  def const_regexp(camel_cased_word); end
  def constantize(camel_cased_word); end
  def dasherize(underscored_word); end
  def deconstantize(path); end
  def demodulize(path); end
  def downcase_first(string); end
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = nil); end
  def humanize(lower_case_and_underscored_word, capitalize: nil, keep_id_suffix: nil); end
  def inflections(locale = nil); end
  def ordinal(number); end
  def ordinalize(number); end
  def parameterize(string, separator: nil, preserve_case: nil, locale: nil); end
  def pluralize(word, locale = nil); end
  def safe_constantize(camel_cased_word); end
  def singularize(word, locale = nil); end
  def tableize(class_name); end
  def titleize(word, keep_id_suffix: nil); end
  def transliterate(string, replacement = nil, locale: nil); end
  def underscore(camel_cased_word); end
  def upcase_first(string); end
  extend ActiveSupport::Inflector
  extend ActiveSupport::Inflector
end
class ActiveSupport::Inflector::Inflections
  def acronym(word); end
  def acronyms; end
  def acronyms_camelize_regex; end
  def acronyms_underscore_regex; end
  def clear(scope = nil); end
  def define_acronym_regex_patterns; end
  def human(rule, replacement); end
  def humans; end
  def initialize; end
  def initialize_dup(orig); end
  def irregular(singular, plural); end
  def plural(rule, replacement); end
  def plurals; end
  def self.instance(locale = nil); end
  def self.instance_or_fallback(locale); end
  def singular(rule, replacement); end
  def singulars; end
  def uncountable(*words); end
  def uncountables; end
end
class ActiveSupport::Inflector::Inflections::Uncountables < Array
  def <<(*word); end
  def add(words); end
  def delete(entry); end
  def initialize; end
  def to_regex(string); end
  def uncountable?(str); end
end
module ActiveSupport::Autoload
  def autoload(const_name, path = nil); end
  def autoload_at(path); end
  def autoload_under(path); end
  def eager_autoload; end
  def eager_load!; end
end
module ActiveSupport::VERSION
end
module ActiveSupport::Concern
  def append_features(base); end
  def class_methods(&class_methods_module_definition); end
  def included(base = nil, &block); end
  def prepend_features(base); end
  def prepended(base = nil, &block); end
  def self.extended(base); end
end
class ActiveSupport::Concern::MultipleIncludedBlocks < StandardError
  def initialize; end
end
class ActiveSupport::Concern::MultiplePrependBlocks < StandardError
  def initialize; end
end
class Module
  def cattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def cattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil, location: nil); end
  def cattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil, location: nil); end
  def delegate(*methods, to: nil, prefix: nil, allow_nil: nil, private: nil); end
  def delegate_missing_to(target, allow_nil: nil); end
  def mattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def mattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil, location: nil); end
  def mattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil, location: nil); end
  def method_visibility(method); end
  def redefine_method(method, &block); end
  def redefine_singleton_method(method, &block); end
  def remove_possible_method(method); end
  def remove_possible_singleton_method(method); end
  def silence_redefinition_of_method(method); end
end
module ActiveSupport::LoggerThreadSafeLevel
  def level; end
  def local_level; end
  def local_level=(level); end
  def local_level_key; end
  def log_at(level); end
  extend ActiveSupport::Concern
end
module ActiveSupport::LoggerSilence
  def silence(severity = nil); end
  extend ActiveSupport::Concern
end
class ActiveSupport::Logger < Logger
  def initialize(*args, **kwargs); end
  def self.logger_outputs_to?(logger, *sources); end
  def self.normalize_sources(sources); end
  def self.silencer; end
  def self.silencer=(val); end
  def silencer; end
  def silencer=(val); end
  include ActiveSupport::LoggerSilence
  include ActiveSupport::LoggerThreadSafeLevel
end
class ActiveSupport::Logger::SimpleFormatter < Logger::Formatter
  def call(severity, timestamp, progname, msg); end
end
class ActiveSupport::BroadcastLogger
  def <<(message); end
  def add(*args, &block); end
  def broadcast_to(*loggers); end
  def broadcasts; end
  def close; end
  def debug!; end
  def debug(*args, &block); end
  def debug?; end
  def dispatch(&block); end
  def error!; end
  def error(*args, &block); end
  def error?; end
  def fatal!; end
  def fatal(*args, &block); end
  def fatal?; end
  def formatter; end
  def formatter=(formatter); end
  def info!; end
  def info(*args, &block); end
  def info?; end
  def initialize(*loggers); end
  def initialize_copy(other); end
  def level; end
  def level=(level); end
  def local_level=(level); end
  def log(*args, &block); end
  def method_missing(name, *, **, &); end
  def progname; end
  def progname=(arg0); end
  def respond_to_missing?(method, include_all); end
  def self.silencer; end
  def self.silencer=(val); end
  def sev_threshold=(level); end
  def silencer; end
  def silencer=(val); end
  def stop_broadcasting_to(logger); end
  def unknown(*args, &block); end
  def warn!; end
  def warn(*args, &block); end
  def warn?; end
  include ActiveSupport::LoggerSilence
  include ActiveSupport::LoggerThreadSafeLevel
end
module DateAndTime
end
module DateAndTime::Compatibility
  def preserve_timezone; end
  def self.preserve_timezone; end
  def self.preserve_timezone=(val); end
  def self.utc_to_local_returns_utc_offset_times; end
  def self.utc_to_local_returns_utc_offset_times=(val); end
  def utc_to_local_returns_utc_offset_times; end
end
class ActiveSupport::ErrorReporter
  def debug_mode; end
  def debug_mode=(arg0); end
  def disable(subscriber); end
  def handle(*error_classes, severity: nil, context: nil, fallback: nil, source: nil); end
  def initialize(*subscribers, logger: nil); end
  def logger; end
  def logger=(arg0); end
  def record(*error_classes, severity: nil, context: nil, source: nil); end
  def report(error, handled: nil, severity: nil, context: nil, source: nil); end
  def set_context(*, **, &); end
  def subscribe(subscriber); end
  def unexpected(error, severity: nil, context: nil, source: nil); end
  def unsubscribe(subscriber); end
end
class ActiveSupport::ErrorReporter::UnexpectedError < Exception
end
module ActiveSupport::ActionableError
  def self.actions(error); end
  def self.dispatch(error, name); end
  extend ActiveSupport::Concern
end
class ActiveSupport::ActionableError::NonActionable < StandardError
end
module ActiveSupport::ActionableError::ClassMethods
  def action(name, &block); end
end
module ActiveSupport::DescendantsTracker
  def descendants; end
  def self.clear(classes); end
  def self.descendants(klass); end
  def self.disable_clear!; end
  def self.reject!(classes); end
  def self.subclasses(klass); end
end
class ActiveSupport::DescendantsTracker::WeakSet < ObjectSpace::WeakMap
  def <<(object); end
  def to_a; end
end
module ActiveSupport::DescendantsTracker::ReloadedClassesFiltering
  def descendants; end
  def subclasses; end
end
class Array
  def blank?; end
  def compact_blank!; end
  def extract_options!; end
  def present?; end
  def to_formatted_s(format = nil); end
  def to_fs(format = nil); end
  def to_param; end
  def to_query(key); end
  def to_sentence(options = nil); end
  def to_xml(options = nil); end
end
class Class < Module
  def class_attribute(*attrs, instance_accessor: nil, instance_reader: nil, instance_writer: nil, instance_predicate: nil, default: nil); end
end
class String
  def blank?; end
  def camelcase(first_letter = nil); end
  def camelize(first_letter = nil); end
  def classify; end
  def constantize; end
  def dasherize; end
  def deconstantize; end
  def demodulize; end
  def downcase_first; end
  def foreign_key(separate_class_name_and_id_with_underscore = nil); end
  def humanize(capitalize: nil, keep_id_suffix: nil); end
  def is_utf8?; end
  def mb_chars; end
  def parameterize(separator: nil, preserve_case: nil, locale: nil); end
  def pluralize(count = nil, locale = nil); end
  def present?; end
  def remove!(*patterns); end
  def remove(*patterns); end
  def safe_constantize; end
  def singularize(locale = nil); end
  def squish!; end
  def squish; end
  def tableize; end
  def titlecase(keep_id_suffix: nil); end
  def titleize(keep_id_suffix: nil); end
  def truncate(truncate_to, options = nil); end
  def truncate_bytes(truncate_to, omission: nil); end
  def truncate_words(words_count, options = nil); end
  def underscore; end
  def upcase_first; end
end
class Object < BasicObject
  def acts_like?(duck); end
  def blank?; end
  def presence; end
  def present?; end
  def to_param; end
  def to_query(key); end
  def with(**attributes); end
  include ActiveSupport::Tryable
end
class NilClass
  def blank?; end
  def present?; end
  def to_param; end
  def try!(*); end
  def try(*); end
end
class FalseClass
  def blank?; end
  def present?; end
  def to_param; end
end
class TrueClass
  def blank?; end
  def present?; end
  def to_param; end
end
class Symbol
  def blank?; end
  def present?; end
end
class Numeric
  def blank?; end
  def present?; end
end
class Time
  def acts_like_time?; end
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def blank?; end
  def change(options); end
  def compare_with_coercion(other); end
  def compare_without_coercion(arg0); end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def eql_with_coercion(other); end
  def eql_without_coercion(arg0); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def in(seconds); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def minus_with_coercion(other); end
  def minus_with_duration(other); end
  def minus_without_coercion(other); end
  def minus_without_duration(arg0); end
  def next_day(days = nil); end
  def next_month(months = nil); end
  def next_year(years = nil); end
  def noon; end
  def plus_with_duration(other); end
  def plus_without_duration(arg0); end
  def present?; end
  def prev_day(days = nil); end
  def prev_month(months = nil); end
  def prev_year(years = nil); end
  def rfc3339(fraction_digits = nil); end
  def sec_fraction; end
  def seconds_since_midnight; end
  def seconds_until_end_of_day; end
  def self.===(other); end
  def self.at_with_coercion(time_or_number, *args, **); end
  def self.at_without_coercion(time, subsec = nil, unit = nil, in: nil); end
  def self.current; end
  def self.days_in_month(month, year = nil); end
  def self.days_in_year(year = nil); end
  def self.find_zone!(time_zone); end
  def self.find_zone(time_zone); end
  def self.rfc3339(str); end
  def self.use_zone(time_zone); end
  def self.zone; end
  def self.zone=(time_zone); end
  def self.zone_default; end
  def self.zone_default=(arg0); end
  def since(seconds); end
  def to_formatted_s(format = nil); end
  def to_fs(format = nil); end
  include DateAndTime::Calculations
  include DateAndTime::Zones
end
module ActiveSupport::Callbacks
  def halted_callback_hook(filter, name); end
  def run_callbacks(kind, type = nil); end
  extend ActiveSupport::Concern
end
module ActiveSupport::Callbacks::Conditionals
end
class ActiveSupport::Callbacks::Conditionals::Value
  def call(target, value); end
  def initialize(&block); end
end
module ActiveSupport::Callbacks::Filters
end
class ActiveSupport::Callbacks::Filters::Environment < Struct
  def halted; end
  def halted=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end
end
class ActiveSupport::Callbacks::Filters::Before
  def apply(callback_sequence); end
  def call(env); end
  def filter; end
  def halted_lambda; end
  def initialize(user_callback, user_conditions, chain_config, filter, name); end
  def name; end
  def user_callback; end
  def user_conditions; end
end
class ActiveSupport::Callbacks::Filters::After
  def apply(callback_sequence); end
  def call(env); end
  def halting; end
  def initialize(user_callback, user_conditions, chain_config); end
  def user_callback; end
  def user_conditions; end
end
class ActiveSupport::Callbacks::Filters::Around
  def apply(callback_sequence); end
  def initialize(user_callback, user_conditions); end
end
class ActiveSupport::Callbacks::Callback
  def apply(callback_sequence); end
  def chain_config; end
  def check_conditionals(conditionals); end
  def compiled; end
  def conditions_lambdas; end
  def current_scopes; end
  def duplicates?(other); end
  def filter; end
  def initialize(name, filter, kind, options, chain_config); end
  def kind; end
  def kind=(arg0); end
  def matches?(_kind, _filter); end
  def merge_conditional_options(chain, if_option:, unless_option:); end
  def name; end
  def name=(arg0); end
  def self.build(chain, filter, kind, options); end
end
module ActiveSupport::Callbacks::CallTemplate
  def self.build(filter, callback); end
end
class ActiveSupport::Callbacks::CallTemplate::MethodCall
  def expand(target, value, block); end
  def initialize(method); end
  def inverted_lambda; end
  def make_lambda; end
end
class ActiveSupport::Callbacks::CallTemplate::ObjectCall
  def expand(target, value, block); end
  def initialize(target, method); end
  def inverted_lambda; end
  def make_lambda; end
end
class ActiveSupport::Callbacks::CallTemplate::InstanceExec0
  def expand(target, value, block); end
  def initialize(block); end
  def inverted_lambda; end
  def make_lambda; end
end
class ActiveSupport::Callbacks::CallTemplate::InstanceExec1
  def expand(target, value, block); end
  def initialize(block); end
  def inverted_lambda; end
  def make_lambda; end
end
class ActiveSupport::Callbacks::CallTemplate::InstanceExec2
  def expand(target, value, block); end
  def initialize(block); end
  def inverted_lambda; end
  def make_lambda; end
end
class ActiveSupport::Callbacks::CallTemplate::ProcCall
  def expand(target, value, block); end
  def initialize(target); end
  def inverted_lambda; end
  def make_lambda; end
end
class ActiveSupport::Callbacks::CallbackSequence
  def after(after); end
  def around(call_template, user_conditions); end
  def before(before); end
  def expand_call_template(arg, block); end
  def final?; end
  def initialize(nested = nil, call_template = nil, user_conditions = nil); end
  def invoke_after(arg); end
  def invoke_before(arg); end
  def nested; end
  def skip?(arg); end
end
class ActiveSupport::Callbacks::CallbackChain
  def append(*callbacks); end
  def append_one(callback); end
  def chain; end
  def clear; end
  def compile(type); end
  def config; end
  def default_terminator; end
  def delete(o); end
  def each(&block); end
  def empty?; end
  def index(o); end
  def initialize(name, config); end
  def initialize_copy(other); end
  def insert(index, o); end
  def name; end
  def prepend(*callbacks); end
  def prepend_one(callback); end
  def remove_duplicates(callback); end
  include Enumerable
end
module ActiveSupport::Callbacks::ClassMethods
  def __update_callbacks(name); end
  def define_callbacks(*names); end
  def get_callbacks(name); end
  def normalize_callback_params(filters, block); end
  def reset_callbacks(name); end
  def set_callback(name, *filter_list, &block); end
  def set_callbacks(name, callbacks); end
  def skip_callback(name, *filter_list, &block); end
end
module ActiveSupport::EnumerableCoreExt
end
module ActiveSupport::EnumerableCoreExt::Constants
  def const_missing(name); end
end
module Enumerable
  def compact_blank; end
  def exclude?(object); end
  def excluding(*elements); end
  def in_order_of(key, series); end
  def including(*elements); end
  def index_by; end
  def index_with(default = nil); end
  def many?; end
  def maximum(key); end
  def minimum(key); end
  def pick(*keys); end
  def pluck(*keys); end
  def sole; end
  def without(*elements); end
end
class Enumerable::SoleItemExpectedError < StandardError
end
class Range
  def sum(initial_value = nil); end
end
class ActiveSupport::DelegationError < NoMethodError
  def self.nil_target(method_name, target); end
end
module ActiveSupport::Delegation
  def self.generate(owner, methods, location: nil, to: nil, prefix: nil, allow_nil: nil, nilable: nil, private: nil, as: nil, signature: nil); end
  def self.generate_method_missing(owner, target, allow_nil: nil); end
end
module ActiveSupport::IsolatedExecutionState
  def self.[](key); end
  def self.[]=(key, value); end
  def self.clear; end
  def self.context; end
  def self.delete(key); end
  def self.isolation_level; end
  def self.isolation_level=(level); end
  def self.key?(key); end
  def self.scope; end
  def self.share_with(other); end
  def self.state; end
  def self.unique_id; end
end
class Thread
  def active_support_execution_state; end
  def active_support_execution_state=(arg0); end
end
class Fiber
  def active_support_execution_state; end
  def active_support_execution_state=(arg0); end
end
class ActiveSupport::CurrentAttributes
  def __callbacks; end
  def __callbacks?; end
  def _reset_callbacks; end
  def _run_reset_callbacks(&block); end
  def self.__callbacks; end
  def self.__callbacks=(value); end
  def self.__callbacks?; end
  def self._reset_callbacks; end
  def self._reset_callbacks=(value); end
  def self.after_reset(*methods, &block); end
  def self.attribute(*names, default: nil); end
  def self.before_reset(*methods, &block); end
  def self.clear_all; end
  def self.current_instances; end
  def self.current_instances_key; end
  def self.defaults; end
  def self.defaults=(value); end
  def self.defaults?; end
  def self.generated_attribute_methods; end
  def self.instance; end
  def self.method_added(name); end
  def self.method_missing(name, *, **, &); end
  def self.reset(*, **, &); end
  def self.reset_all; end
  def self.resets(*methods, &block); end
  def self.respond_to_missing?(name, _); end
  def self.set(*, **, &); end
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveSupport::Callbacks
end
module ActiveSupport::Concurrency
end
class ActiveSupport::Concurrency::ShareLock
  def busy_for_exclusive?(purpose); end
  def busy_for_sharing?(purpose); end
  def eligible_waiters?(compatible); end
  def exclusive(purpose: nil, compatible: nil, after_compatible: nil, no_wait: nil); end
  def initialize; end
  def raw_state; end
  def sharing; end
  def start_exclusive(purpose: nil, compatible: nil, no_wait: nil); end
  def start_sharing; end
  def stop_exclusive(compatible: nil); end
  def stop_sharing; end
  def wait_for(method, &block); end
  def yield_shares(purpose: nil, compatible: nil, block_share: nil); end
  include MonitorMixin
end
module ActiveSupport::Dependencies
  def self._autoloaded_tracked_classes; end
  def self._autoloaded_tracked_classes=(arg0); end
  def self._eager_load_paths; end
  def self._eager_load_paths=(arg0); end
  def self.autoload_once_paths; end
  def self.autoload_once_paths=(arg0); end
  def self.autoload_paths; end
  def self.autoload_paths=(arg0); end
  def self.autoloader; end
  def self.autoloader=(arg0); end
  def self.clear; end
  def self.eager_load?(path); end
  def self.interlock; end
  def self.interlock=(arg0); end
  def self.load_interlock(&block); end
  def self.run_interlock(&block); end
  def self.search_for_file(relpath); end
  def self.unload_interlock(&block); end
end
class ActiveSupport::Dependencies::Interlock
  def done_running; end
  def done_unloading; end
  def initialize; end
  def loading(&block); end
  def permit_concurrent_loads(&block); end
  def raw_state(&block); end
  def running(&block); end
  def start_running; end
  def start_unloading; end
  def unloading(&block); end
end
module ActiveSupport::Dependencies::RequireDependency
  def require_dependency(filename); end
end
class ActiveSupport::ExecutionWrapper
  def __callbacks; end
  def __callbacks?; end
  def _complete_callbacks; end
  def _run_callbacks; end
  def _run_complete_callbacks(&block); end
  def _run_run_callbacks(&block); end
  def complete!; end
  def complete; end
  def hook_state; end
  def run!; end
  def run; end
  def self.__callbacks; end
  def self.__callbacks=(value); end
  def self.__callbacks?; end
  def self._complete_callbacks; end
  def self._complete_callbacks=(value); end
  def self._run_callbacks; end
  def self._run_callbacks=(value); end
  def self.active?; end
  def self.active_key; end
  def self.error_reporter; end
  def self.perform; end
  def self.register_hook(hook, outer: nil); end
  def self.run!(reset: nil); end
  def self.to_complete(*args, &block); end
  def self.to_run(*args, &block); end
  def self.wrap(source: nil); end
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveSupport::Callbacks
end
class ActiveSupport::ExecutionWrapper::RunHook < Struct
  def before(target); end
  def hook; end
  def hook=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveSupport::ExecutionWrapper::CompleteHook < Struct
  def after(target); end
  def before(target); end
  def hook; end
  def hook=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveSupport::Executor < ActiveSupport::ExecutionWrapper
end
module ActiveSupport::Multibyte
  def self.proxy_class; end
  def self.proxy_class=(klass); end
end
class ActiveSupport::Duration
  def %(other); end
  def *(other); end
  def +(other); end
  def +@; end
  def -(other); end
  def -@; end
  def /(other); end
  def <=>(other); end
  def ==(other); end
  def _parts; end
  def abs(&); end
  def after(time = nil); end
  def ago(time = nil); end
  def as_json(options = nil); end
  def before(time = nil); end
  def coerce(other); end
  def encode_with(coder); end
  def eql?(other); end
  def from_now(time = nil); end
  def hash; end
  def in_days; end
  def in_hours; end
  def in_minutes; end
  def in_months; end
  def in_seconds; end
  def in_weeks; end
  def in_years; end
  def init_with(coder); end
  def initialize(value, parts, variable = nil); end
  def inspect; end
  def instance_of?(klass); end
  def is_a?(klass); end
  def iso8601(precision: nil); end
  def kind_of?(klass); end
  def method_missing(*, **, &); end
  def negative?(&); end
  def parts; end
  def positive?(&); end
  def raise_type_error(other); end
  def respond_to_missing?(method, _); end
  def self.===(other); end
  def self.build(value); end
  def self.calculate_total_seconds(parts); end
  def self.days(value); end
  def self.hours(value); end
  def self.minutes(value); end
  def self.months(value); end
  def self.parse(iso8601duration); end
  def self.seconds(value); end
  def self.weeks(value); end
  def self.years(value); end
  def since(time = nil); end
  def sum(sign, time = nil); end
  def to_f(&); end
  def to_i; end
  def to_s; end
  def until(time = nil); end
  def value; end
  def variable?; end
  def zero?(&); end
end
class ActiveSupport::Duration::Scalar < Numeric
  def %(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def -@; end
  def /(other); end
  def <=>(other); end
  def calculate(op, other); end
  def coerce(other); end
  def initialize(value); end
  def raise_type_error(other); end
  def to_f(*, **, &); end
  def to_i(*, **, &); end
  def to_s(*, **, &); end
  def value; end
  def variable?; end
end
class ActiveSupport::TimeZone
  def <=>(zone); end
  def =~(re); end
  def at(*args); end
  def encode_with(coder); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def init_with(coder); end
  def initialize(name, utc_offset = nil, tzinfo = nil); end
  def iso8601(str); end
  def local(*args); end
  def local_to_utc(time, dst = nil); end
  def match?(re); end
  def name; end
  def now; end
  def parse(str, now = nil); end
  def parts_to_time(parts, now); end
  def period_for_local(time, dst = nil); end
  def period_for_utc(time); end
  def periods_for_local(time); end
  def rfc3339(str); end
  def self.[](arg); end
  def self.all; end
  def self.clear; end
  def self.country_zones(country_code); end
  def self.create(*, **); end
  def self.find_tzinfo(name); end
  def self.load_country_zones(code); end
  def self.new(name); end
  def self.seconds_to_utc_offset(seconds, colon = nil); end
  def self.us_zones; end
  def self.zones_map; end
  def strptime(str, format, now = nil); end
  def time_now; end
  def to_s; end
  def today; end
  def tomorrow; end
  def tzinfo; end
  def utc_offset; end
  def utc_to_local(time); end
  def yesterday; end
  include Comparable
end
class ActiveSupport::TimeWithZone
  def +(other); end
  def -(other); end
  def <=>(other); end
  def acts_like_time?; end
  def advance(options); end
  def after?(arg0); end
  def ago(other); end
  def as_json(options = nil); end
  def before?(arg0); end
  def between?(min, max); end
  def blank?; end
  def change(options); end
  def comparable_time; end
  def day; end
  def dst?; end
  def duration_of_variable_length?(obj); end
  def encode_with(coder); end
  def eql?(other); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def freeze; end
  def future?; end
  def get_period_and_ensure_valid_local_time(period); end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmt?; end
  def gmt_offset; end
  def gmtime; end
  def gmtoff; end
  def hash; end
  def hour; end
  def httpdate; end
  def in(other); end
  def in_time_zone(new_zone = nil); end
  def incorporate_utc_offset(time, offset); end
  def init_with(coder); end
  def initialize(utc_time, time_zone, local_time = nil, period = nil); end
  def inspect; end
  def is_a?(klass); end
  def isdst; end
  def iso8601(fraction_digits = nil); end
  def kind_of?(klass); end
  def localtime(utc_offset = nil); end
  def marshal_dump; end
  def marshal_load(variables); end
  def mday; end
  def method_missing(*, **, &); end
  def min; end
  def mon; end
  def month; end
  def next_day?; end
  def nsec; end
  def past?; end
  def period; end
  def present?; end
  def prev_day?; end
  def respond_to?(sym, include_priv = nil); end
  def respond_to_missing?(sym, include_priv); end
  def rfc2822; end
  def rfc3339(fraction_digits = nil); end
  def rfc822; end
  def sec; end
  def since(other); end
  def strftime(format); end
  def time; end
  def time_zone; end
  def to_a; end
  def to_date; end
  def to_datetime; end
  def to_f; end
  def to_formatted_s(format = nil); end
  def to_fs(format = nil); end
  def to_i; end
  def to_r; end
  def to_s; end
  def to_time; end
  def today?; end
  def tomorrow?; end
  def transfer_time_values_to_utc_constructor(time); end
  def tv_sec; end
  def usec; end
  def utc; end
  def utc?; end
  def utc_offset; end
  def wday; end
  def wrap_with_time_zone(time); end
  def xmlschema(fraction_digits = nil); end
  def yday; end
  def year; end
  def yesterday?; end
  def zone; end
  include Comparable
end
module DateAndTime::Zones
  def in_time_zone(zone = nil); end
  def time_with_zone(time, zone); end
end
module ActiveSupport::Tryable
  def try!(*args, **, &block); end
  def try(*args, **, &block); end
end
class Delegator < BasicObject
  include ActiveSupport::Tryable
end
class DateTime < Date
  def <=>(other); end
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def change(options); end
  def default_inspect; end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmtime; end
  def in(seconds); end
  def inspect; end
  def localtime(utc_offset = nil); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def noon; end
  def nsec; end
  def offset_in_seconds; end
  def readable_inspect; end
  def seconds_since_midnight; end
  def seconds_since_unix_epoch; end
  def seconds_until_end_of_day; end
  def self.civil_from_format(utc_or_local, year, month = nil, day = nil, hour = nil, min = nil, sec = nil); end
  def self.current; end
  def since(seconds); end
  def subsec; end
  def to_f; end
  def to_formatted_s(format = nil); end
  def to_fs(format = nil); end
  def to_i; end
  def usec; end
  def utc; end
  def utc?; end
  def utc_offset; end
end
module DateAndTime::Calculations
  def after?(date_or_time); end
  def all_day; end
  def all_month; end
  def all_quarter; end
  def all_week(start_day = nil); end
  def all_year; end
  def at_beginning_of_month; end
  def at_beginning_of_quarter; end
  def at_beginning_of_week(start_day = nil); end
  def at_beginning_of_year; end
  def at_end_of_month; end
  def at_end_of_quarter; end
  def at_end_of_week(start_day = nil); end
  def at_end_of_year; end
  def before?(date_or_time); end
  def beginning_of_month; end
  def beginning_of_quarter; end
  def beginning_of_week(start_day = nil); end
  def beginning_of_year; end
  def copy_time_to(other); end
  def days_ago(days); end
  def days_since(days); end
  def days_span(day); end
  def days_to_week_start(start_day = nil); end
  def end_of_month; end
  def end_of_quarter; end
  def end_of_week(start_day = nil); end
  def end_of_year; end
  def first_hour(date_or_time); end
  def future?; end
  def last_hour(date_or_time); end
  def last_month; end
  def last_quarter; end
  def last_week(start_day = nil, same_time: nil); end
  def last_weekday; end
  def last_year; end
  def monday; end
  def months_ago(months); end
  def months_since(months); end
  def next_day?; end
  def next_occurring(day_of_week); end
  def next_quarter; end
  def next_week(given_day_in_next_week = nil, same_time: nil); end
  def next_weekday; end
  def on_weekday?; end
  def on_weekend?; end
  def past?; end
  def prev_day?; end
  def prev_occurring(day_of_week); end
  def prev_quarter; end
  def prev_week(start_day = nil, same_time: nil); end
  def prev_weekday; end
  def quarter; end
  def sunday; end
  def today?; end
  def tomorrow; end
  def tomorrow?; end
  def weeks_ago(weeks); end
  def weeks_since(weeks); end
  def years_ago(years); end
  def years_since(years); end
  def yesterday; end
  def yesterday?; end
end
class Date
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_end_of_day; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def change(options); end
  def compare_with_coercion(other); end
  def compare_without_coercion(arg0); end
  def end_of_day; end
  def in(seconds); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def minus_with_duration(other); end
  def minus_without_duration(arg0); end
  def noon; end
  def plus_with_duration(other); end
  def plus_without_duration(arg0); end
  def self.beginning_of_week; end
  def self.beginning_of_week=(week_start); end
  def self.beginning_of_week_default; end
  def self.beginning_of_week_default=(arg0); end
  def self.current; end
  def self.find_beginning_of_week!(week_start); end
  def self.tomorrow; end
  def self.yesterday; end
  def since(seconds); end
  include DateAndTime::Calculations
  include DateAndTime::Zones
end
class ActiveSupport::FileUpdateChecker
  def compile_ext(array); end
  def compile_glob(hash); end
  def escape(key); end
  def execute; end
  def execute_if_updated; end
  def initialize(files, dirs = nil, &block); end
  def max_mtime(paths); end
  def updated?; end
  def updated_at(paths); end
  def watched; end
end
class ActiveSupport::HashWithIndifferentAccess < Hash
  def [](key); end
  def []=(key, value); end
  def assoc(key); end
  def compact; end
  def convert_key(key); end
  def convert_value(value, conversion: nil); end
  def deep_stringify_keys!; end
  def deep_stringify_keys; end
  def deep_symbolize_keys; end
  def default(key = nil); end
  def delete(key); end
  def dig(*args); end
  def dup; end
  def except(*keys); end
  def extractable_options?; end
  def fetch(key, *extras); end
  def fetch_values(*indices, &block); end
  def has_key?(key); end
  def include?(key); end
  def initialize(constructor = nil); end
  def key?(key); end
  def member?(key); end
  def merge!(*other_hashes, &block); end
  def merge(*hashes, &block); end
  def nested_under_indifferent_access; end
  def regular_update(*arg0); end
  def regular_writer(arg0, arg1); end
  def reject(*args, &block); end
  def replace(other_hash); end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def select(*args, &block); end
  def self.[](*args); end
  def set_defaults(target); end
  def slice!(*keys); end
  def slice(*keys); end
  def store(key, value); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys; end
  def to_hash; end
  def to_options!; end
  def to_options; end
  def to_proc; end
  def transform_keys!(hash = nil, &block); end
  def transform_keys(hash = nil, &block); end
  def transform_values(&block); end
  def update(*other_hashes, &block); end
  def update_with_single_argument(other_hash, block); end
  def values_at(*keys); end
  def with_defaults!(other_hash); end
  def with_defaults(other_hash); end
  def with_indifferent_access; end
  def without(*keys); end
end
